import discord
from discord.ext import commands
from discord import app_commands
from discord import Embed
import aiohttp
import json
import os
import requests
import random
import datetime
from datetime import datetime
import re
import logging
import time
import asyncio
from pypresence import Presence
from discord.ui import Button, View, Modal, TextInput, Select

intents = discord.Intents.all()
intents.message_content = True
bot = commands.Bot(command_prefix='/', intents=intents)


mcolor = discord.Color.from_rgb(244, 197, 56) #replcae with color 
ftext = "footer text"      # | footer text
fimage = "image url"       # | footer icon
sellerkey = "seller key"   # | keyauth api key
brand = "Brand Name"       # | name to appear on the embeds
presenceis = "Tickets"     # | presence status, e.g. "Tickets" will be Watching Tickets..

#roles, seperate with , - can be left black
gen_role = []
reset_role = []
keyinfo_role = []

#channel ids (make sure only one channel is in the list, leave blank if you don't want logging):
gen_logs = []
reset_logs = []


async def has_role(interaction: discord.Interaction, role_ids: list[int] | int) -> bool:
    if isinstance(role_ids, int):
        role_ids = [role_ids]
    return any(role.id in role_ids for role in interaction.user.roles)

class PersistentView(View):
    def __init__(self):
        super().__init__(timeout=None)

@bot.event
async def on_ready():
    print(f"Logged in as {bot.user}")
    await bot.tree.sync()
    print("Syncing slash commands...")
    print("Slash commands synced!")
    print("successfully finished startup") # - this is for most hosting services
    activity = discord.Activity(type=discord.ActivityType.watching, name=f"{presenceis}", button="Discord")
    await bot.change_presence(status=discord.Status.online, activity=activity)
    print("Presence set Successfully")
    bot.add_view(PersistentView())


@bot.tree.command(name="onetime", description="Generate a Onetime Perm key")

async def onetime(interaction: discord.Interaction, amount: int = 1):
    if not await has_role(interaction, gen_role):
        embed = discord.Embed(
            title="Permission Denied",
            description="You don't have the required role to use this command.",
            color=discord.Color.red()
        )
        embed.set_footer(text=ftext, icon_url=fimage)
        await interaction.response.send_message(embed=embed)
        return

    await interaction.response.defer()
    url = f"https://keyauth.win/api/seller/?sellerkey={sellerkey}&type=add&expiry=1&mask=ZeroTraceOT-******&level=1&amount={amount}&format=text"
    response = requests.get(url)
    key = response.text

    embed = discord.Embed(
        title=f"{brand} | Key Generated",
        description=f"Your Onetime Key is:\n```\n{key.replace(',', '\n')}\n```\n - ***Duration:*** `Onetime`\n - ***[Guide](https://zerotrace.gitbook.io/spoofers/perm)***",
        color=mcolor
    )
    embed.set_footer(text=ftext, icon_url=fimage)
    await interaction.followup.send(embed=embed)

    if gen_logs:
        log_channel = bot.get_channel(gen_logs[0]) 
        if log_channel:
            log_embed = discord.Embed(
                title="Key Generated",
                description=f"**Keys:**\n```\n{key.replace(',', '\n')}\n```\n**Amount:** `{amount}`\n**Generated By:** `{interaction.user}`\n**Date:** <t:{int(datetime.now().timestamp())}>",
                color=mcolor
            )
            await log_channel.send(embed=log_embed)

@bot.tree.command(name="lifetime", description="Generate a Lifetime Perm key")
async def lifetime(interaction: discord.Interaction, amount: int = 1):
    if not await has_role(interaction, gen_role):
        embed = discord.Embed(
            title="Permission Denied",
            description="You don't have the required role to use this command.",
            color=discord.Color.red()
        )
        embed.set_footer(text=ftext, icon_url=fimage)
        await interaction.response.send_message(embed=embed)
        return

    await interaction.response.defer()
    url = f"https://keyauth.win/api/seller/?sellerkey={sellerkey}&type=add&expiry=99999&mask=ZeroTraceLT-******&level=1&amount={amount}&format=text"
    response = requests.get(url)
    key = response.text

    embed = discord.Embed(
        title=f"{brand} | Key Generated",
        description=f"Your Lifetime Key is:\n```\n{key.replace(',', '\n')}\n```\n - ***Duration:*** `Lifetime`\n - ***[Guide](https://zerotrace.gitbook.io/spoofers/perm)***",
        color=mcolor
    )
    embed.set_footer(text=ftext, icon_url=fimage)
    await interaction.followup.send(embed=embed)

    if gen_logs: 
        log_channel = bot.get_channel(gen_logs[0]) 
        if log_channel:
            log_embed = discord.Embed(
                title="Key Generated",
                description=f"**Keys:**\n```\n{key.replace(',', '\n')}\n```\n**Amount:** `{amount}`\n**Generated By:** `{interaction.user}`\n**Date:** <t:{int(datetime.now().timestamp())}>",
                color=mcolor
            )
            await log_channel.send(embed=log_embed)

@bot.tree.command(name="reset", description="HWID resets a key!")
async def reset(interaction: discord.Interaction, key: str):
    if not await has_role(interaction, reset_role):
        embed = discord.Embed(
            title="Permission Denied",
            description="You don't have the required role to use this command.",
            color=discord.Color.red()
        )
        embed.set_footer(text=ftext, icon_url=fimage)
        await interaction.response.send_message(embed=embed, ephemeral=False)
        return

    await interaction.response.defer()
    verify_url = f"https://keyauth.win/api/seller/?sellerkey={sellerkey}&type=verify&key={key}"
    response = requests.get(verify_url).json()

    if not response.get("success"):
        embed = discord.Embed(
            title="Invalid Key",
            description=f"Key `{key}` does not exist.",
            color=discord.Color.red()
        )
        embed.set_footer(text=ftext, icon_url=fimage)
        await interaction.followup.send(embed=embed)
        return

    reset_url = f"https://keyauth.win/api/seller/?sellerkey={sellerkey}&type=resetuser&user={key}"
    hwid_response = requests.get(reset_url)
    hwid_message = hwid_response.json().get("message", "No response message.")

    userdata_url = f"https://keyauth.win/api/seller/?sellerkey={sellerkey}&type=userdata&user={key}"
    userdata_response = requests.get(userdata_url).json()

    if not userdata_response.get("success"):
        reset_embed = discord.Embed(
            title=f"{brand} | Key Reset",
            description=f"Key `{key}`\nStatus: `No HWID to reset`.",
            color=mcolor
        )
    else:
        reset_embed = discord.Embed(
            title=f"{brand} | Key Reset",
            description=f"Key `{key}`\nStatus: `Key Reset successful`",
            color=mcolor
        )
    reset_embed.set_footer(text=ftext, icon_url=fimage)
    await interaction.followup.send(embed=reset_embed)

    if reset_logs:
        log_channel = bot.get_channel(reset_logs[0])
        if log_channel:
            log_embed = discord.Embed(
                title="Key Reset",
                description=f"**Key:**\n```\n{key}\n```\n**Reset By:** `{interaction.user}`\n**Date:** <t:{int(datetime.now().timestamp())}>",
                color=mcolor
            )
            await log_channel.send(embed=log_embed)

@bot.tree.command(name="keyinfo", description="Check a key's information.")
async def keyinfo(interaction: discord.Interaction, key: str):
    if not await has_role(interaction, keyinfo_role):
        embed = discord.Embed(
            title="Permission Denied",
            description="You don't have the required role to use this command.",
            color=discord.Color.red()
        )
        embed.set_footer(text=ftext, icon_url=fimage)
        await interaction.response.send_message(embed=embed, ephemeral=False)
        return

    await interaction.response.defer()
    verify_url = f"https://keyauth.win/api/seller/?sellerkey={sellerkey}&type=verify&key={key}"
    response = requests.get(verify_url).json()

    if not response.get("success"):
        embed = discord.Embed(
            title="Invalid Key",
            description=f"Key `{key}` does not exist.",
            color=discord.Color.red()
        )
        embed.set_footer(text=ftext, icon_url=fimage)
        await interaction.followup.send(embed=embed)
        return

    userdata_url = f"https://keyauth.win/api/seller/?sellerkey={sellerkey}&type=userdata&user={key}"
    userdata_response = requests.get(userdata_url).json()
    print(f"Userdata Response: {userdata_response}")

    if not userdata_response.get("success"):
        embed = discord.Embed(
            title=f"{brand} | Key Information",
            description=f"Key: `{key}`\nStatus: `Unused`",
            color=mcolor
        )
        embed.set_footer(text=ftext, icon_url=fimage)
        await interaction.followup.send(embed=embed)
        return

    hwid = userdata_response.get("hwid", "N/A")
    last_login = userdata_response.get("lastlogin", "N/A")
    create_date = userdata_response.get("createdate", "N/A")
    expiry = userdata_response.get("subscriptions", [{}])[0].get("expiry", "N/A")
    ip = userdata_response.get("ip", "N/A")

    embed = discord.Embed(
        title=f"{brand} | Key Information",
        description=f"**__User Information:__**\nKey: `{key}`\nStatus: `Used`\nHWID: `{hwid}`\nIP: `{ip}`\n\n**__Key Data:__**\nCreation Date: <t:{create_date}>\nLast Login: <t:{last_login}>\nExpires: <t:{expiry}>",
        color=mcolor
    )
    embed.set_footer(text=ftext, icon_url=fimage)
    await interaction.followup.send(embed=embed)

    if gen_logs: 
        log_channel = bot.get_channel(gen_logs[0]) 
        if log_channel: 
            log_embed = discord.Embed(
                title="Key Information Accessed",
                description=f"**Key:**\n```\n{key}\n```\n**Accessed By:** `{interaction.user}`\n**Date:** <t:{int(datetime.now().timestamp())}>",
                color=mcolor
            )
            await log_channel.send(embed=log_embed)

bot.run(f"token")
